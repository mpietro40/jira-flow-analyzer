"""
Duplicate Analysis PDF Report Generator
Creates comprehensive PDF reports for duplicate story analysis.

Author: Pietro Maffi
Purpose: Generate professional PDF reports for duplicate detection results
"""

from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from datetime import datetime
import logging
from typing import Dict

# Configure logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('DuplicatePDFGenerator')

class DuplicatePDFReportGenerator:
    """
    Generates comprehensive PDF reports for duplicate story analysis.
    """
    
    def __init__(self):
        """Initialize the PDF generator."""
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom paragraph styles for the report."""
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.darkred,
            alignment=1  # Center alignment
        )
        
        self.heading_style = ParagraphStyle(
            'CustomHeading',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.darkred
        )
        
        self.subheading_style = ParagraphStyle(
            'CustomSubheading',
            parent=self.styles['Heading3'],
            fontSize=14,
            spaceAfter=8,
            textColor=colors.red
        )
    
    def generate_report(self, analysis_data: Dict, output_path: str):
        """
        Generate complete PDF report.
        
        Args:
            analysis_data (Dict): Analysis results
            output_path (str): Path to save the PDF report
        """
        try:
            # Create PDF document
            doc = SimpleDocTemplate(
                output_path,
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=60,
                author="Duplicate Story Detector by Pietro Maffi",
                title="Duplicate Story Analysis Report",
                subject="Jira Duplicate Story Detection"
            )
            
            # Build report content
            story = []
            
            # Title page
            story.extend(self._create_title_page(analysis_data))
            story.append(PageBreak())
            
            # Executive summary
            story.extend(self._create_executive_summary(analysis_data))
            story.append(PageBreak())
            
            # Detailed analysis
            story.extend(self._create_detailed_analysis(analysis_data))
            
            # Build PDF with page numbers
            def add_page_elements(canvas, doc):
                canvas.saveState()
                # Page number
                page_num = canvas.getPageNumber()
                canvas.drawRightString(A4[0] - 72, 30, f"Page {page_num}")
                # Footer
                canvas.setFont("Helvetica", 8)
                footer_text = "Duplicate Story Analysis - Generated by Pietro Maffi"
                text_width = canvas.stringWidth(footer_text)
                canvas.drawString((A4[0] - text_width) / 2, 30, footer_text)
                canvas.restoreState()
            
            doc.build(story, onFirstPage=add_page_elements, onLaterPages=add_page_elements)
            logger.info(f"âœ… PDF report generated successfully: {output_path}")
            
        except Exception as e:
            logger.error(f"ðŸš© PDF generation failed: {str(e)}")
            raise Exception(f"Failed to generate PDF report: {str(e)}")
    
    def _create_title_page(self, data: Dict) -> list:
        """Create title page content."""
        content = []
        
        # Title
        content.append(Paragraph("Duplicate Story Analysis Report", self.title_style))
        content.append(Spacer(1, 0.5*inch))
        
        # Analysis info
        analysis_results = data.get('analysis_results', {})
        generation_date = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        content.append(Paragraph(f"Generated on: {generation_date}", self.styles['Normal']))
        content.append(Spacer(1, 0.2*inch))
        
        # Jira server info
        jira_url = data.get('jira_url', 'Unknown server')
        content.append(Paragraph(f"Jira Server: {jira_url}", self.styles['Normal']))
        content.append(Spacer(1, 0.2*inch))
        
        # JQL query
        jql_query = analysis_results.get('jql_query', 'No query specified')
        content.append(Paragraph("JQL Query:", self.styles['Normal']))
        content.append(Paragraph(f"<font name='Courier'>{jql_query}</font>", self.styles['Normal']))
        content.append(Spacer(1, 0.3*inch))
        
        # Summary stats
        stats = analysis_results.get('statistics', {})
        content.append(Paragraph(f"Total Issues Analyzed: {analysis_results.get('total_issues_analyzed', 0)}", self.styles['Normal']))
        content.append(Paragraph(f"Duplicate Groups Found: {stats.get('total_groups', 0)}", self.styles['Normal']))
        content.append(Paragraph(f"Potential Duplicates: {stats.get('potential_duplicates', 0)}", self.styles['Normal']))
        
        return content
    
    def _create_executive_summary(self, data: Dict) -> list:
        """Create executive summary section."""
        content = []
        
        content.append(Paragraph("Executive Summary", self.title_style))
        content.append(Spacer(1, 0.2*inch))
        
        analysis_results = data.get('analysis_results', {})
        stats = analysis_results.get('statistics', {})
        
        # Key findings
        total_issues = analysis_results.get('total_issues_analyzed', 0)
        duplicate_groups = stats.get('total_groups', 0)
        potential_duplicates = stats.get('potential_duplicates', 0)
        duplicate_percentage = stats.get('duplicate_percentage', 0)
        
        summary_text = f"""
        This report analyzes {total_issues} Jira issues for potential duplicates based on summary and description similarity.
        <br/><br/>
        <b>Key Findings:</b><br/>
        â€¢ {duplicate_groups} duplicate groups identified<br/>
        â€¢ {potential_duplicates} potential duplicate issues ({duplicate_percentage:.1f}% of total)<br/>
        â€¢ Largest group contains {stats.get('largest_group_size', 0)} similar issues<br/>
        â€¢ Average group size: {stats.get('average_group_size', 0):.1f} issues<br/>
        """
        
        if stats.get('similarity_stats'):
            sim_stats = stats['similarity_stats']
            summary_text += f"""<br/>
            <b>Similarity Statistics:</b><br/>
            â€¢ Average similarity: {sim_stats.get('average_similarity', 0) * 100:.1f}%<br/>
            â€¢ Highest similarity: {sim_stats.get('max_similarity', 0) * 100:.1f}%<br/>
            â€¢ Lowest similarity: {sim_stats.get('min_similarity', 0) * 100:.1f}%<br/>
            """
        
        content.append(Paragraph(summary_text, self.styles['Normal']))
        
        return content
    
    def _create_detailed_analysis(self, data: Dict) -> list:
        """Create detailed analysis section."""
        content = []
        
        content.append(Paragraph("Detailed Analysis", self.title_style))
        content.append(Spacer(1, 0.2*inch))
        
        analysis_results = data.get('analysis_results', {})
        duplicate_groups = analysis_results.get('duplicate_groups', [])
        
        if not duplicate_groups:
            content.append(Paragraph("No potential duplicates found in the analyzed issues.", self.styles['Normal']))
            return content
        
        # Process each duplicate group
        for i, group in enumerate(duplicate_groups, 1):
            content.append(Paragraph(f"Duplicate Group {i}", self.heading_style))
            
            # Primary issue (oldest)
            primary = group['primary_issue']
            content.append(Paragraph("Original Issue (Oldest):", self.subheading_style))
            
            primary_data = [
                ['Key', primary['key']],
                ['Summary', primary['summary'][:100] + '...' if len(primary['summary']) > 100 else primary['summary']],
                ['Status', primary['status']],
                ['Created', self._format_date(primary.get('created', ''))]
            ]
            
            primary_table = Table(primary_data, colWidths=[1.5*inch, 4.5*inch])
            primary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightgreen),
                ('TEXTCOLOR', (0, 0), (0, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            
            content.append(primary_table)
            content.append(Spacer(1, 0.2*inch))
            
            # Potential duplicates
            content.append(Paragraph("Potential Duplicates:", self.subheading_style))
            
            for j, duplicate in enumerate(group['duplicates'], 1):
                issue = duplicate['issue']
                similarity = duplicate['similarity']
                
                duplicate_data = [
                    ['Key', issue['key']],
                    ['Summary', issue['summary'][:100] + '...' if len(issue['summary']) > 100 else issue['summary']],
                    ['Status', issue['status']],
                    ['Created', self._format_date(issue.get('created', ''))],
                    ['Similarity', f"{similarity * 100:.1f}%"]
                ]
                
                # Color based on similarity
                bg_color = colors.lightcoral if similarity >= 0.8 else colors.lightyellow if similarity >= 0.6 else colors.lightgrey
                
                duplicate_table = Table(duplicate_data, colWidths=[1.5*inch, 4.5*inch])
                duplicate_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (0, -1), bg_color),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP')
                ]))
                
                content.append(duplicate_table)
                content.append(Spacer(1, 0.1*inch))
            
            content.append(Spacer(1, 0.3*inch))
            
            # Add page break after every 2 groups to avoid overcrowding
            if i % 2 == 0 and i < len(duplicate_groups):
                content.append(PageBreak())
        
        return content
    
    def _format_date(self, date_string: str) -> str:
        """Format date string for display."""
        if not date_string:
            return 'Unknown'
        try:
            # Parse ISO format date
            dt = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            return dt.strftime('%Y-%m-%d')
        except:
            return date_string[:10] if len(date_string) >= 10 else date_string